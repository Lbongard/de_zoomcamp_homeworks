Q1
Solution: --rm

Q2

docker run -it --entrypoint bash python:3.9

solution: 0.42.0


### FOR UPLOADING DATA TO PG DATABASE FOR QUESTIONS 3-6 ###
python3 upload_data.py --user admin --url https://github.com/DataTalksClub/nyc-tlc-data/releases/download/green/green_tripdata_2019-09.csv.gz --password hw1 --host localhost --port 5432 --table green_taxi_data  --db ny_taxi_sept --filename green_taxi_data

python3 upload_data.py --user admin --url https://s3.amazonaws.com/nyc-tlc/misc/taxi+_zone_lookup.csv --password hw1 --host localhost --port 5432 --table zones --db ny_taxi_sept --filename zones 


Q3
select count(index)
from green_taxi_data
where cast(lpep_pickup_datetime as Date) = '2019-09-18' and cast(lpep_dropoff_datetime as Date) = '2019-09-18'

solution: 15612

Q4

select cast(lpep_pickup_datetime as Date) pickup_date, max(trip_distance) max_dist
from green_taxi_data
group by cast(lpep_pickup_datetime as Date)
order by max_dist desc

solution: 2019-09-26 (341.64)

Q5

select cast(lpep_pickup_datetime as Date) pu_date, sum(gtd."total_amount") sum_total, z."Borough"
from green_taxi_data gtd join zones z on gtd."PULocationID" = z."LocationID"
where cast(lpep_pickup_datetime as Date) = '2019-09-18'
group by cast(lpep_pickup_datetime as Date), z."Borough"
having sum(gtd."total_amount") > 50000


solution: "Brooklyn" "Manhattan" "Queens"


Q6

select max(tip_amount) max_tip,
	   z2."Zone" do_zone
from green_taxi_data gtd 
	join zones z1 on gtd."PULocationID" = z1."LocationID"
	join zones z2 on gtd."DOLocationID" = z2."LocationID"
where z1."Zone" = 'Astoria'
group by z2."Zone"
order by max_tip desc


solution: JFK Airport


Q7

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_bigquery_dataset.demo_dataset will be created
  + resource "google_bigquery_dataset" "demo_dataset" {
      + creation_time              = (known after apply)
      + dataset_id                 = "hw1_dataset"
      + default_collation          = (known after apply)
      + delete_contents_on_destroy = false
      + effective_labels           = (known after apply)
      + etag                       = (known after apply)
      + id                         = (known after apply)
      + is_case_insensitive        = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "US"
      + max_time_travel_hours      = (known after apply)
      + project                    = "inbound-ship-412204"
      + self_link                  = (known after apply)
      + storage_billing_model      = (known after apply)
      + terraform_labels           = (known after apply)
    }

  # google_storage_bucket.demo-bucket will be created
  + resource "google_storage_bucket" "demo-bucket" {
      + effective_labels            = (known after apply)
      + force_destroy               = true
      + id                          = (known after apply)
      + location                    = "US"
      + name                        = "inbound-ship-412204-terra-bucket"
      + project                     = (known after apply)
      + public_access_prevention    = (known after apply)
      + rpo                         = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + terraform_labels            = (known after apply)
      + uniform_bucket_level_access = (known after apply)
      + url                         = (known after apply)

      + lifecycle_rule {
          + action {
              + type = "AbortIncompleteMultipartUpload"
            }
          + condition {
              + age                   = 1
              + matches_prefix        = []
              + matches_storage_class = []
              + matches_suffix        = []
              + with_state            = (known after apply)
            }
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_bigquery_dataset.demo_dataset: Creating...
google_storage_bucket.demo-bucket: Creating...
google_bigquery_dataset.demo_dataset: Creation complete after 1s [id=projects/inbound-ship-412204/datasets/hw1_dataset]
google_storage_bucket.demo-bucket: Creation complete after 2s [id=inbound-ship-412204-terra-bucket]